sort1 uses: Bubble Sort

How do you know?: The runtimes, especially for higher number of elements in random and reversed, seem to indicate that the longest out
of all runtimes comes from the fact, that the algorithm "bubbles" the highest number to the end. Selection sort would be a bit faster
although both fall under O(n^2)

sort2 uses: Merge Sort

How do you know?: This algorithm show not too much speed advantage over sort1 and 3 if the list was sorted, yet out performs in random
and reversed. This seems to show the time penalty for sorted lists (since we still half the array and recombine it) but shows O(n log n)
behaviour in random and reversed

sort3 uses: Selection Sort

How do you know?: The runtimes were the second highest out of all, yet a bit faster than sort1 (bubble sort) for random and reversed. This
shows that we still iterate over every element and show O(n^2)



Run Summary:
--------------------
Sort 1:
-> sorted 10.000    : 0.118s
-> sorted 50.000    : 0.542s
-> random 10.000    : 0.298s
-> random 50.000    : 7.844s
-> reversed 10.000  : 0.285s
-> reversed 50.000  : 5.417s
--------------------
Sort 2:
-> sorted 10.000    : 0.059s
-> sorted 50.000    : 0.528s
-> random 10.000    : 0.065s
-> random 50.000    : 0.514s
-> reversed 10.000  : 0.093s
-> reversed 50.000  : 0.522s
--------------------
Sort 3:
-> sorted 10.000    : 0.184s
-> sorted 50.000    : 3.074s
-> random 10.000    : 0.176s
-> random 50.000    : 3.169s
-> reversed 10.000  : 0.202s
-> reversed 50.000  : 2.984s
--------------------